(()=>{"use strict";var e={704:(e,t,r)=>{r.r(t)},659:(e,t,r)=>{r.r(t)},283:(e,t,r)=>{r.r(t)},485:(e,t,r)=>{r.r(t)},717:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(r(842)),n=r(527);t.default=class{constructor(){this.controller=new o.default,this.view=new n.AppView}start(){document.querySelector(".sources").addEventListener("click",(e=>this.controller.getNews(e,(e=>this.view.drawNews(e))))),this.controller.getSources((e=>this.view.drawCapitalLetters(e)))}}},961:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AppDataSources=void 0,t.AppDataSources=class{constructor(e=[]){this.sourcesData=e}filteredSources(e){return this.sourcesData.filter((t=>t.name[0]===e))}}},853:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(r(24));var n;!function(e){e.API_URL="https://newsapi.org/v2/",e.API_KEY="49f7f00097634047b51ec59052a49d04"}(n||(n={}));class a extends o.default{constructor(){super(n.API_URL,{apiKey:n.API_KEY})}}t.default=a},842:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(r(853));var n;!function(e){e.sources="sources",e.everything="everything"}(n||(n={}));class a extends o.default{getSources(e){super.getResp({endpoint:n.sources},e)}getNews(e,t){let r=e.target;const s=e.currentTarget;for(;r!==s;){if(r.classList.contains("source__item")){const e=r.getAttribute("data-source-id");return void(s.getAttribute("data-source")!==e&&e&&(s.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},t)))}r=r.parentNode}}}t.default=a},24:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.baseLink=e,this.options=t}getResp({endpoint:e="",options:t={}},r=(()=>{console.error("No callback for GET response")})){this.load("GET",e,r,t)}errorHandler(e){if(!e.ok)throw 401!==e.status&&404!==e.status||console.log(`Sorry, but there is ${e.status} error: ${e.statusText}`),Error(e.statusText);return e}makeUrl(e,t){const r=Object.assign(Object.assign({},this.options),e);let s=`${this.baseLink}${t}?`;return Object.keys(r).forEach((e=>{s+=`${e}=${r[e]}&`})),s.slice(0,-1)}load(e,t,r,s={}){fetch(this.makeUrl(s,t),{method:e}).then(this.errorHandler).then((e=>e.json())).then((e=>r(e))).catch((e=>console.error(e)))}}},527:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppView=void 0;const o=s(r(798)),n=s(r(53)),a=r(961),c=s(r(593));class u{constructor(){this.news=new o.default,this.sources=new n.default,this.capitalLetters=new c.default,this.appDataSources=new a.AppDataSources}drawNews(e){const t=(null==e?void 0:e.articles)?null==e?void 0:e.articles:[];this.news.draw(t)}drawCapitalLetters(e){const t=(null==e?void 0:e.sources)?null==e?void 0:e.sources:[];this.appDataSources.sourcesData=t;const r=this.appDataSources.filteredSources("A");this.sources.draw(r),this.capitalLetters.draw(),this.capitalLetters.capitalLettersElem.addEventListener("click",(e=>{this.drawSources(e)}))}drawSources(e){const t=null==e?void 0:e.target;if(t.classList.contains("capital-letters__item")){const e=t.getAttribute("data-item"),r=this.appDataSources.filteredSources(e);this.sources.draw(r)}}}t.AppView=u,t.default=u},593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(704),t.default=class{constructor(){this.capitalLettersElem=document.querySelector(".capital-letters"),this.letters=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]}draw(){return[...this.letters].forEach((e=>{const t=document.createElement("div");t.className="capital-letters__item",t.dataset.item=e,t.textContent=e,this.capitalLettersElem.append(t)})),this.capitalLettersElem}}},798:(e,t,r)=>{var s;Object.defineProperty(t,"__esModule",{value:!0}),r(659),function(e){e.newsItemTemp="#newsItemTemp",e.newsItem=".news__item",e.newsMetaPhoto=".news__meta-photo",e.newsMetaAuthor=".news__meta-author",e.newsMetaDate=".news__meta-date",e.newsDescriptionTitle=".news__description-title",e.newsDescriptionSource=".news__description-source",e.newsDescriptionContent=".news__description-content",e.newsReadMore=".news__read-more a",e.news=".news"}(s||(s={})),t.default=class{draw(e){const t=e.length>=10?e.filter(((e,t)=>t<10)):e,r=document.createDocumentFragment(),o=document.querySelector(s.newsItemTemp),n=document.querySelector(s.news);t.forEach(((e,t)=>{const n=o.content.cloneNode(!0),a=n.querySelector(s.newsItem),c=n.querySelector(s.newsMetaPhoto),u=n.querySelector(s.newsMetaAuthor),i=n.querySelector(s.newsMetaDate),l=n.querySelector(s.newsDescriptionTitle),d=n.querySelector(s.newsDescriptionSource),p=n.querySelector(s.newsDescriptionContent),f=n.querySelector(s.newsReadMore);t%2&&a.classList.add("alt"),c.style.backgroundImage=`url(${e.urlToImage||"img/news_placeholder.jpg"})`,u.textContent=e.author||e.source.name,i.textContent=e.publishedAt.slice(0,10).split("-").reverse().join("-"),l.textContent=e.title,d.textContent=e.source.name,p.textContent=e.description,f.setAttribute("href",e.url),r.append(n)})),n.innerHTML="",n.appendChild(r)}}},53:(e,t,r)=>{var s;Object.defineProperty(t,"__esModule",{value:!0}),r(283),function(e){e.sourceItemTemp="#sourceItemTemp",e.sourceItemName=".source__item-name",e.sourceItem=".source__item",e.sourceDataId="data-source-id",e.sources=".sources"}(s||(s={})),t.default=class{draw(e){const t=document.createDocumentFragment(),r=document.querySelector(s.sourceItemTemp),o=document.querySelector(s.sources);if(o.innerHTML="",!e.length){const e=document.createElement("div");return e.textContent="Sorry, sources not found",void o.append(e)}e.forEach((e=>{const o=r.content.cloneNode(!0),n=o.querySelector(s.sourceItemName),a=o.querySelector(s.sourceItem);n.textContent=e.name,a.setAttribute(s.sourceDataId,e.id),t.append(o)})),o.append(t)}}},607:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(r(717));r(485),(new o.default).start()}},t={};function r(s){var o=t[s];if(void 0!==o)return o.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,r),n.exports}r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,